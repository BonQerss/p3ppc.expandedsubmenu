import("FirstTimeSetup.msg");

void TurnOnRecommended()
{
    BIT_ON(6320); //Disable First Time Setup
    BIT_OFF(6321); //Mod Menu
    BIT_ON(6322); // QuickTravelPlus
    BIT_ON(6323); // MobileCalendar
    BIT_ON(6324); // DungeonOptions
    BIT_ON(6325); // Find a Friend
    BIT_ON(5678); // Spoiler-free find a friend
    BIT_OFF(6326); // Save Anywhere
    BIT_OFF(6327); // Save Everyday
    BIT_ON(6330); //Call the Clock (DungeonOptions)
    BIT_ON(6331); //Enable Auto Healing(DungeonOptions)
    BIT_ON(6333); //Enable Floor Selection (DungeonOptions)
    BIT_ON(6332); //Enable Organize Party (DungeonOptions)
    BIT_ON(6335); //Enable Default Direct Commands
}

void FirstTimeSetup()
{
	//Introduction
	MSG_WND_DSP();
	FUNCTION_002D(SquareMenuConfig);
	MSG_WND_CLS();

	//Marks first time setup as complete
	BIT_ON(6320);

	//Set all menu option values to 0
	for (int i = 0; i < 8; i++)
	{
		BIT_OFF(6321 + i);
	}

	// Set second group of menu options to 0
	for (int i = 0; i < 3; i++)
	{
		BIT_OFF(6340 + i);
	}

	//Enable "Options" in menu for later configuration
	BIT_ON(6329);

	//Set all dungeon option values to 0
	for (int i = 0; i < 7; i++)
	{
		BIT_OFF(6330 + i);
	}

	TurnOnRecommended();

	//Toggle options until done
	MenuOptions();
}




bool ToggleOption(int startMsg, int startFlag, int selection, bool subOption)
{
	MSG_WND_DSP();
	MSG(startMsg + selection); // about section for each mod
	SEL_DEFKEY(14, 2);
	int sel = SEL(ToggleMenu);
	switch (sel)
	{
	case 0: //on // if you select on then you get sub options
		if (selection == 8) // only needed because flags aren't in order
			BIT_ON(6340);
		else
			BIT_ON(startFlag + selection);
		if (selection == 3 && !subOption)
		{
			MSG_WND_CLS();
			DungeonOptionsToggle();
		}
		else if (selection == 4)
		{
			MSG_WND_CLS();
			FindAFriendOptionsToggle();
		}
		break;
	case 1: //off // if you select off for sub selections then all are off
		if (selection == 8)
			BIT_OFF(6340);
		else
			BIT_OFF(startFlag + selection);
		if (selection == 3 && !subOption)
		{
			BIT_OFF(6330);
			BIT_OFF(6331);
			BIT_OFF(6332);
			BIT_OFF(6333);
		}
		else if (selection == 9)
		{
			BIT_OFF(6350);
			BIT_OFF(6351);
			BIT_OFF(6352);
			BIT_OFF(6353);
		}
		break;
	case 2: //back
		break;
	}
	MSG_WND_CLS();
	return sel;
}



void MenuOptions()
{
	//First time setup for Custom Square Menu
	if (!BIT_CHK(6320))
	{
		FirstTimeSetup();
	}
	else
	{
		//Toggle options until done
		bool done = false;
		int pageNum = 0;
		int mask = 0;
		while (!done)
		{
			//Set message variables
			for (int i = 0; i < 8; i++)
			{
				SET_MSG_VAR(i, 576 + BIT_CHK(6321 + i), 6); // 0 or 1, no or yes
			}
			SET_MSG_VAR(8, 576 + BIT_CHK(6340), 6);
			SEL_DEFKEY(14, 18);
			SEL_DEFKEY(15, 18);

			if (!pageNum)
			{
				mask = 1504;
				if(!ModMenuShown())
				{
					// Hide mod menu option
					mask += 1;
					// Show save anywhere on first page
					mask -= 32;
				}
				SEL_DEFKEY(10, 9);
				SEL_DEFKEY(11, 9);
				SEL_DEFKEY(5, 9);
				SEL_DEFKEY(7, 9);
			}
			else
			{
				mask = 543;
				if(!ModMenuShown())
				{
					// Hide save anywhere on second page
					mask += 32;
				}
				SEL_DEFKEY(10, 10);
				SEL_DEFKEY(11, 10);
				SEL_DEFKEY(5, 10);
				SEL_DEFKEY(7, 10);
			}

			//Toggle selection or read more about it
			int selection = MSG_SELECT(SquareMenuOptions_Text + pageNum, SquareMenuOptions, mask);
			if (selection < 9)
			{
				ToggleOption(ModMenu_About, 6321, selection, false); // mod menu about is 0, that would be any number + 0
			}
			else if (selection == 9 || selection == 10)
			{
				pageNum = !pageNum;
			}
			else
			{
				done = true;
					if (!ModMenuEnabled())
					{
						MSG_WND_DSP();
						MSG(OptionsWarning);
					}
					if ( BIT_CHK( 6321 ))
					{
						if ( !BIT_CHK( 6372 ))
						{
							MSG_WND_DSP();
							MSG(ModMenuWarning);
							MSG(ModMenuWarning_2);
							BIT_ON(6372);
						}
					}

					MSG_WND_CLS();
			}
		}
	}
}

void FindAFriendOptionsToggle()
{
	//Toggle options until done
	bool done = false;
	while (!done)
	{
		//Set message variables for menu options
		SET_MSG_VAR(0, 576 + BIT_CHK(5678), 6); // spoiler free mode
		SET_MSG_VAR(1, 576 + BIT_CHK(6325), 6); // enable it or not
		SEL_DEFKEY(14, 2);
		SEL_DEFKEY(15, 2);
		//Toggle selection or read more about it
		int selection = MSG_SELECT(FindAFriendOptions_Text, FindAFriendOptions, 0); 
		if (selection == 0)
		{
			MSG_WND_DSP();
			MSG(SPOILER_TOGGLE);
			SEL_DEFKEY(14, 1);
			int sel = SEL(ToggleMenu);
			if (sel == 0)
				BIT_ON(5678);
			else if (sel == 1)
				BIT_OFF(5678);
			MSG_WND_CLS();
		}
		else
		{
			done = true;
		}
	}
}

void DungeonOptionsToggle()
{
	//Toggle options until done
	bool done = false;
	while (!done)
	{
		//Set message variables for menu options
		for (int i = 0; i < 7; i++)
		{
			SET_MSG_VAR(i, 576 + BIT_CHK(6330 + i), 6);
		}
		SEL_DEFKEY(14, 4);
		SEL_DEFKEY(15, 4);
		//Toggle selection or read more about it
		int selection = MSG_SELECT(DungeonOptions_Text, DungeonOptions, 0);
		if (selection != 7)
		{
			bool optionSel = ToggleOption(ShowTheClock_About, 6330, selection, true); // message call (adv_sel), sel + flag 
			// If show fox was selected
			if (selection == 0)
			{
				// Reset fox uses goho-m flag if call fox was turned off
				if (optionSel == 1) // use Traesto
				{
					BIT_OFF(6360);
				}
				else if (optionSel == 0)
				{
					bool done2 = false;
					while (!done2)
					{
						// If call fox was turned on show selection for whether calling the fox should us a goho-m
						SET_MSG_VAR(0, 577 - BIT_CHK(6360), 6);
						SEL_DEFKEY(14, 1);
						SEL_DEFKEY(15, 1);
						MSG_WND_DSP();
						int foxSel = MSG_SELECT(ShowClockOptions_Text, ShowClockOptions, 0);
						// Toggle the option
						if (foxSel == 0)
						{
							SET_MSG_VAR(2, 1313, 5);
							MSG_WND_DSP();
							MSG(ShowClock_Traesto);
							SEL_DEFKEY(14, 2);
							SEL_DEFKEY(15, 2);
							int gohomSel = SEL(ToggleMenu);
							//
							if (gohomSel == 0)
							{
								BIT_OFF(6360);
							}
							else if (gohomSel == 1)
							{
								BIT_ON(6360);
							}
						} else {
							done2 = true;
						}
						MSG_WND_CLS();
					}
				}
			}
		}
		else
		{
			done = true;
		}
	}
}


