import("FirstTimeSetup.msg");

void TurnOnRecommended()
{
    BIT_ON(997);  // Enable Spoiler-free find a friend
    BIT_ON(998);  // Enable Go Back Home Easily
    BIT_ON(1003);  // Disable First Time Setup // 506
    BIT_OFF(1004); // Disable Mod Menu // 507
    BIT_ON(1005);  // Enable QuickTravelPlus // 508
    BIT_ON(1006);  // Enable MobileCalendar // 509
    BIT_ON(1007);  // Enable DungeonOptions
    BIT_ON(1008);  // Enable Find a Friend
    BIT_OFF(1009); // Disable Save Anywhere
    BIT_OFF(1010); // Disable Save Everyday
    BIT_ON(1013);  // Enable Call the Clock (DungeonOptions)
    BIT_ON(1014);  // Enable Auto Healing(DungeonOptions)
    BIT_ON(1015);  // Enable Organize Party (DungeonOptions)
    BIT_ON(1016);  // Enable Floor Selection (DungeonOptions)
    BIT_ON(1018);  // Enable Default Direct Commands
}

void FirstTimeSetup()
{
    // Introduction
    MSG_WND_DSP();
    FUNCTION_002D(SquareMenuConfig);
    MSG_WND_CLS();

    // Set all menu option values to 0
    for (int i = 0; i < 8; i++)
    {
        BIT_OFF(1004 + i); // 1004
    }

    // Set second group of menu options to 0
    for (int i = 0; i < 3; i++)
    {
        BIT_OFF(1023 + i); // 1023
    }

    // Enable "Options" in menu for later configuration
    BIT_ON(1012); // 1012

    // Set all dungeon option values to 0
    for (int i = 0; i < 7; i++)
    {
        BIT_OFF(1013 + i); // 1013
    }

    TurnOnRecommended();

    // Toggle options until done
    MenuOptions();
}

int ToggleOption(int startMsg, int startFlag, int selection) {
    MSG_WND_DSP();
    MSG(startMsg + selection); // about section for each mod
    SEL_DEFKEY(PadButton.Circle, 2);
    int sel = SEL(ToggleMenu);
    MSG_WND_CLS();
    if (sel == 0) { // 0 == On
        BIT_ON(startFlag + selection);
    }
    else if (sel == 1) { // 1 == Off
        BIT_OFF(startFlag + selection);
    }
    return sel;
}

void MenuOptions()
{
    // First time setup for Custom Square Menu
    // TODO: I've noticed redundant checks in other files...
    // either we remove this one and always call FirstTimeSetup
    // in those situations, or we remove those checks and call MenuOptions directly.
    // Considering FirstTimeSetup calls MenuOptions, the latter is probably best.
    if (!BIT_CHK(1003)) // 1003
    {
        FirstTimeSetup();
    }
    else
    {
        // Toggle options until done
        bool done = false;
        int pageNum = 0;
        int mask = 0;
        while (!done)
        {
            // Set message variables
            for (int i = 0; i < 8; i++)
            {
                SET_MSG_VAR(i, 576 + BIT_CHK(1004 + i), 6); // 0 or 1, no or yes // 1004
            }
            SET_MSG_VAR(8, 576 + BIT_CHK(1023), 6); // 1023
            SET_MSG_VAR(9, 576 + BIT_CHK(998), 6); // 998
            SEL_DEFKEY(PadButton.Circle, 18);
            SEL_DEFKEY(PadButton.Square, 18);

            if (!pageNum)
            {
                mask = 3040; // 0b1011_1110_0000
                if(!ModMenuShown())
                {
                    // Hide mod menu option
                    mask += 1;
                    // Show save anywhere on first page
                    mask -= 32; // 0b0010_0000
                }
                SEL_DEFKEY(10, 10);
                SEL_DEFKEY(11, 10);
                SEL_DEFKEY(PadButton.Right, 10);
                SEL_DEFKEY(PadButton.Left, 10);
            }
            else
            {
                mask = 1055; // 0b0100_0001_1111
                if(!ModMenuShown())
                {
                    // Hide save anywhere on second page
                    mask += 32; // 0b0010_0000
                }
                SEL_DEFKEY(10, 11);
                SEL_DEFKEY(11, 11);
                SEL_DEFKEY(PadButton.Right, 11);
                SEL_DEFKEY(PadButton.Left, 11);
            }

            // Toggle selection or read more about it
            int selection = MSG_SELECT(SquareMenuOptions_Text + pageNum, SquareMenuOptions, mask);
            if (selection == 8) {
                ToggleOption(RemoveLunchtimeInvites_About, 1023, 0); // 1023
            }
            else if (selection == 9) {
                ToggleOption(GBHE_About, 998, 0); // 998
            }
            else if (((selection != 8) || (selection != 9)) && (selection < 10)) {
                int smSel = ToggleOption(ModMenu_About, 1004, selection); // mod menu about is 0, that would be any number + 0 // 1004
                if (smSel == 0) {
                    if ( selection == 0 ) {
                        ModMenuOptionsToggle();
                    }
                    if (selection == 3) {
                        DungeonOptionsToggle();
                    }
                    else if (selection == 4) {
                        FindAFriendOptionsToggle();
                    }
                }
                else if (smSel == 1) {
                    if (selection == 3) {
                        BIT_OFF(1013); // 1013
                        BIT_OFF(1014); // 1014
                        BIT_OFF(1015); // 1015
                        BIT_OFF(1016); // 1016
                    }
                }
            }
            else if (selection == 10 || selection == 11) {
                pageNum = !pageNum;
            }
            else {
                done = true;
                if (!ModMenuEnabled()) {
                    MSG_WND_DSP();
                    MSG(OptionsWarning);
                }
                if (BIT_CHK(1004)) { // 1004
                    if (!BIT_CHK(1056)) { // 1056
                        MSG_WND_DSP();
                        MSG(ModMenuWarning);
                        MSG(ModMenuWarning_2);
                        BIT_ON(1056); // 1056
                    }
                }
                MSG_WND_CLS();
            }
        }
    }
}

void FindAFriendOptionsToggle()
{
    // Toggle options until done
    bool done = false;
    while (!done)
    {
        // Set message variables for menu options
        SET_MSG_VAR(0, 576 + BIT_CHK(997), 6); // spoiler free mode // 997
        SET_MSG_VAR(1, 576 + BIT_CHK(1008), 6); // enable it or not // 1008
        SEL_DEFKEY(PadButton.Circle, 2);
        SEL_DEFKEY(PadButton.Square, 2);
        // Toggle selection or read more about it
        int selection = MSG_SELECT(FindAFriendOptions_Text, FindAFriendOptions, 0); 
        if (selection == 0)
        {
            MSG_WND_DSP();
            MSG(SPOILER_TOGGLE);
            SEL_DEFKEY(14, 1);
            int sel = SEL(ToggleMenu);
            if (sel == 0)
                BIT_ON(997); // 997
            else if (sel == 1)
                BIT_OFF(997); // 997
            MSG_WND_CLS();
        }
        else
        {
            done = true;
        }
    }
}

void ModMenuOptionsToggle()
{
    // Toggle options until done
    bool done = false;
    while (!done)
    {
        // Set message variables for menu options
        SET_MSG_VAR(0, 576 + BIT_CHK(996), 6); // First and foremost // 996
        SET_MSG_VAR(1, 576 + BIT_CHK(1004), 6); // enable it or not // 1004
        SEL_DEFKEY(PadButton.Circle, 2);
        SEL_DEFKEY(PadButton.Square, 2);
        // Toggle selection or read more about it
        int selection = MSG_SELECT(ModMenuFirst_Text, ModMenuFirst, 0); 
        if (selection == 0)
        {
            MSG_WND_DSP();
            MSG(ShowModMenuFirst);
            SEL_DEFKEY(14, 1);
            int sel = SEL(ToggleMenu);
            if (sel == 0)
                BIT_ON(996); // 996
            else if (sel == 1)
                BIT_OFF(996); // 996
            MSG_WND_CLS();
        }
        else
        {
            done = true;
        }
    }
}

void DungeonOptionsToggle() {
    // Toggle options until done
    while (true) {
        // Set message variables for menu options
        for (int i = 0; i < 7; i++) {
            SET_MSG_VAR(i, 576 + BIT_CHK(1013 + i), 6); // 1013
        }
        SEL_DEFKEY(PadButton.Circle, 7);
        SEL_DEFKEY(PadButton.Square, 7);
        // Toggle selection or read more about it
        int selection = MSG_SELECT(DungeonOptions_Text, DungeonOptions, 0);
        if (selection == 7) {
            break;
        }
        bool optionSel = ToggleOption(ShowTheClock_About, 1013, selection); // message call (adv_sel), sel + flag // 1013
        // TODO: Implement sub-options for other dungeon options if applicable
        // If call the clock was selected
        if (selection == 0) {
            // If call the clock was disabled, disable Traesto Gem flag
            if (optionSel == 1) {
                BIT_OFF(1033); // 1033
            }
            else { // Ask to use Traesto Gem if call the clock was enabled
                while (true) {
                    // If call the clock was turned on, show selection for
                    // whether calling the clock should use a traesto
                    SET_MSG_VAR(0, 576 + BIT_CHK(1033), 6); // 1033
                    SEL_DEFKEY(PadButton.Circle, 1);
                    SEL_DEFKEY(PadButton.Square, 1);
                    MSG_WND_DSP();
                    int clockSel = MSG_SELECT(ShowClockOptions_Text, ShowClockOptions, 0);
                    // Back out, else toggle the option
                    if (clockSel != 0) {
                        break;
                    }
                    SET_MSG_VAR(2, 1313, 5);
                    MSG_WND_DSP();
                    MSG(ShowClock_Traesto);
                    SEL_DEFKEY(PadButton.Circle, 2);
                    SEL_DEFKEY(PadButton.Square, 2);
                    int traestoSel = SEL(ToggleMenu);
                    if (traestoSel == 0) {
                        BIT_ON(1033); // 1033
                    }
                    else if (traestoSel == 1) {
                        BIT_OFF(1033); // 1033
                    }
                    MSG_WND_CLS();
                }
            }
        }
    }
}


