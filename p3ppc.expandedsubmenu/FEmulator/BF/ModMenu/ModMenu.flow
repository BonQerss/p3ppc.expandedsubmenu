//import flow files
import( "Utilities.flow" );
//import( "QuickTests.flow" );
//import msg files
import( "ModMenu.msg" );


//global variables
global int gFieldMajor;
global int gFieldMinor;
global int gEventMajor;
global int gEventMinor;
global int unitId;
global bool isPC;

bool keepMenus;

void ModMenuInit()
{
    isPC = true;
    int FldCurMaj = FLD_GET_MAJOR();
    int FldCurMin = FLD_GET_MINOR();
    keepMenus = true;
    while ( keepMenus )
    {
        SEL_DEFKEY( 14, 999 );
        if (isPC = true)
            SEL_DEFKEY( 11, 5 );
        else
            SEL_DEFKEY( 9, 5 );
        int selection = MSG_SELECT( ModMenuName, ModMenu, 0 );
        switch ( selection )
        {
            case 999://Cancel
                // CallOriginalSquareMenu();
                return;
            case 0://Use original square function
                CallOriginalSquareMenu();
                keepMenus = false;
                break;
            case 1://Player
                PlayerEditorDisplay();
                break;
            case 2://Battle Select
                CallBattle();
                break;
            case 3://Sound Test
                int bgmId = SelectNumberPrompt( SelectBgmDialog, 5 );
                if (bgmId != -1)
                    BGM( bgmId );
                break;
            case 4://Field Select
                FieldSelect();
                break;
            case 5://Next Page
                ModMenuPage2();
                break;
        }
    }
}

void ModMenuPage2()
{
    while ( keepMenus )
    {
        SEL_DEFKEY( 14, 999 );
        if (isPC = true)
            SEL_DEFKEY( 10, 6 );
        else
            SEL_DEFKEY( 8, 6 );
        int selection = MSG_SELECT( ModMenuName, ModMenu2, 0 );
        switch ( selection )
        {
            case 0: // Event Select
                EventSelect();
                break;
            case 1: // Facility
                CallFacilityDisplay();
                break;
            case 2: // Flags
                FlagsEditorDisplay();
                break;
            case 3: // Font Test
                DisplayMessagePrompt( FontTest );
                break;
            case 4: // About
                DisplayMessagePrompt( AboutMsg );
                //QuickTestsMenu();
                break;
            case 5: // Set up favorites
                SetUpFavorites();
                break;
            case 6: // Previous Page
            case 999: // Cancel
                //ModMenuInit();
                return;
        }
    }
}

void CallBattle()
{
    int FldCurMaj = FLD_GET_MAJOR();
    int FldCurMin = FLD_GET_MINOR();
    SEL_DEFKEY( 14, 999 );
    while ( keepMenus )
    {
        int selection = MSG_SELECT( ModMenuName, BattleSelect, 0 );
        switch ( selection )
        {
            case 999://Cancel
                return;
            case 0: // Manual Select
                int Encounter = SelectNumberPrompt( EncounterPrompt, 3 );
                if ( Encounter != -1 )
                {
                    CALL_BATTLE( Encounter );
                    WAIT_BATTLE();
                    CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                    return;
                }
                break; // break if Encounter == -1, return to BattleSelect
            case 1: // Tartarus Select
                CallTarTar();
                break;
            case 2: // Boss Select
                CallBattle_B();
                break;
        }
    }
}

void CallTarTar()
{
    int FldCurMaj = FLD_GET_MAJOR();
    int FldCurMin = FLD_GET_MINOR();
    SEL_DEFKEY( 14, 999 );
    while ( keepMenus )
    {
        int bossSel = MSG_SELECT( TAR_SEL1_Text, BlockSelect, 0 );
        switch (bossSel)
        {
            // TODO: I've changed returns here to breaks so that
            // if the player backs out of these procedures,
            // they just go back to this menu and can pick another
            // however I'm not sure if we want to close the menus
            // permanently if a battle is called or not
            case 999: // Cancel
                return;
            case 0: // Block 1
                CallTarTar_1();
                break;
            case 1: // Block 2
                CallTarTar_2();
                break;
            case 2: // Block 3
                CallTarTar_3();
                break;
            case 3: // Block 4
                CallTarTar_4();
                break;
            case 4: // Block 5
                CallTarTar_5();
                break;
            case 5: //Block 6
                CallTarTar_6();
                break;
        }
    }
}

void CallTarTar_1()
{
    int FldCurMaj = FLD_GET_MAJOR();
    int FldCurMin = FLD_GET_MINOR();
    SEL_DEFKEY( 14, 999 );
    while ( keepMenus )
    {
        int bossSel = MSG_SELECT( TAR_SEL2_Text, TarTarSelect_1, 0 );
        switch (bossSel)
        {
            case 999: // Cancel
                return;
            case 0: // Venus Eagle
                CALL_BATTLE( 490 );
                WAIT_BATTLE();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                return;
            case 1: // Dancing Hand
                CALL_BATTLE( 462 );
                WAIT_BATTLE();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                return;
            case 2: // Rampage Drive
                CALL_BATTLE( 463 );
                WAIT_BATTLE();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                return;
        }
    }
}

void CallTarTar_2()
{
    int FldCurMaj = FLD_GET_MAJOR();
    int FldCurMin = FLD_GET_MINOR();
    SEL_DEFKEY( 14, 999 );
    while ( keepMenus )
    {
        int bossSel = MSG_SELECT( TAR_SEL2_Text, TarTarSelect_2, 0 );
        switch (bossSel)
        {
            case 999: // Cancel
                return;
            case 0: // Crying Table
                CALL_BATTLE( 464 );
                WAIT_BATTLE();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                return;
            case 1: // Change Relic
                CALL_BATTLE( 465 );
                WAIT_BATTLE();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                return;
            case 2: // Golden Beetle
                CALL_BATTLE( 470 );
                WAIT_BATTLE();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                return;
            case 3: // Intrepid Knight
                CALL_BATTLE( 471 );
                WAIT_BATTLE();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                return;
            case 4: // Furious Gigas
                CALL_BATTLE( 472 );
                WAIT_BATTLE();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                return;
        }
    }
}

void CallTarTar_3()
{
    int FldCurMaj = FLD_GET_MAJOR();
    int FldCurMin = FLD_GET_MINOR();
    SEL_DEFKEY( 14, 999 );
    while ( keepMenus )
    {
        int bossSel = MSG_SELECT( TAR_SEL2_Text, TarTarSelect_3, 0 );
        switch (bossSel)
        {
            case 999: // Cancel
                return;
            case 0: // Fanatic Tower
                CALL_BATTLE( 473 );
                WAIT_BATTLE();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                return;
            case 1: // Magical Magus
                CALL_BATTLE( 474 );
                WAIT_BATTLE();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                return;
            case 2: // Neutral Dancer
                CALL_BATTLE( 475 );
                WAIT_BATTLE();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                return;
        }
    }
}

void CallTarTar_4()
{
    int FldCurMaj = FLD_GET_MAJOR();
    int FldCurMin = FLD_GET_MINOR();
    SEL_DEFKEY( 14, 999 );
    while ( keepMenus )
    {
        int bossSel = MSG_SELECT( TAR_SEL2_Text, TarTarSelect_4, 0 );
        switch (bossSel)
        {
            case 999: // Cancel
                return;
            case 0: // Arcane Turret
                CALL_BATTLE( 476 );
                WAIT_BATTLE();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                return;
            case 1: // Sleeping Table
                CALL_BATTLE( 477 );
                WAIT_BATTLE();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                return;
            case 2: // Hell Knight
                CALL_BATTLE( 478 );
                WAIT_BATTLE();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                return;
            case 3: // Mythical Gigas
                CALL_BATTLE( 479 );
                WAIT_BATTLE();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                return;
        }
    }
}

void CallTarTar_5()
{
    int FldCurMaj = FLD_GET_MAJOR();
    int FldCurMin = FLD_GET_MINOR();
    SEL_DEFKEY( 14, 999 );
    while ( keepMenus )
    {
        int bossSel = MSG_SELECT( TAR_SEL2_Text, TarTarSelect_5, 0 );
        switch (bossSel)
        {
            case 999: // Cancel
                return;
            case 0: // Judgement Sword
                CALL_BATTLE( 480 );
                WAIT_BATTLE();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                return;
            case 1: // Stasis Giant
                CALL_BATTLE( 481 );
                WAIT_BATTLE();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                return;
            case 2: // Phantom King
                CALL_BATTLE( 482 );
                WAIT_BATTLE();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                return;
            case 3: // Royal Dancer
                CALL_BATTLE( 483 );
                WAIT_BATTLE();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                return;
            case 4: // Reckoning Dice
                CALL_BATTLE( 484 );
                WAIT_BATTLE();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                return;
        }
    }
}

void CallTarTar_6()
{
    int FldCurMaj = FLD_GET_MAJOR();
    int FldCurMin = FLD_GET_MINOR();
    SEL_DEFKEY( 14, 999 );
    while ( keepMenus )
    {
        int bossSel = MSG_SELECT( TAR_SEL2_Text, TarTarSelect_6, 0 );
        switch (bossSel)
        {
            case 999: // Cancel
                return;
            case 0: // Noble Seeker
                CALL_BATTLE( 485 );
                WAIT_BATTLE();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                return;
            case 1: // Carnal Snakes
                CALL_BATTLE( 486 );
                WAIT_BATTLE();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                return;
            case 2: // World Balance
                CALL_BATTLE( 487 );
                WAIT_BATTLE();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                return;
            case 3: // Fierce Cyclops
                CALL_BATTLE( 488 );
                WAIT_BATTLE();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                return;
            case 4: // Jotun of Grief
                CALL_BATTLE( 489 );
                WAIT_BATTLE();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                return;
        }
    }
}

void CallBattle_B()
{
    int FldCurMaj = FLD_GET_MAJOR();
    int FldCurMin = FLD_GET_MINOR();
    SEL_DEFKEY( 14, 999 );
    SEL_DEFKEY( 9, 6 );
    while ( keepMenus )
    {
        int bossSel = MSG_SELECT( BOSS_SEL1_Text, BossSelect_1, 0 );
        switch (bossSel)
        {
            case 999: // Cancel
                return;
            case 0: // Priestess
                CALL_BATTLE( 416 );
                WAIT_BATTLE();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                return;
            case 1: // Emperor/Empress
                CALL_BATTLE( 417 );
                WAIT_BATTLE();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                return;
            case 2: // Hierophant
                CALL_BATTLE( 418 );
                WAIT_BATTLE();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                return;
            case 3: // Lovers
                CALL_BATTLE( 419 );
                WAIT_BATTLE();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                return;
            case 4: // Chariot/Justice
                CALL_BATTLE( 420 );
                WAIT_BATTLE();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                return;
            case 5: // Hermit
                CALL_BATTLE( 421 );
                WAIT_BATTLE();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                return;
            case 6: // Next Page
                CallBattle_2();
                break;
        }
    }
}

void CallBattle_2()
{
    int FldCurMaj = FLD_GET_MAJOR();
    int FldCurMin = FLD_GET_MINOR();
    SEL_DEFKEY( 14, 999 );
    SEL_DEFKEY( 9, 4 );
    SEL_DEFKEY( 8, 5 );
    while ( keepMenus )
    {
        int bossSel_2 = MSG_SELECT( BOSS_SEL2_Text, BossSelect_2, 0 );      
        switch (bossSel_2)
        {
            case 0: // Fortune/Strength
                CALL_BATTLE( 422 );
                WAIT_BATTLE();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                return;
            case 1: // Takaya and Jin
                CALL_BATTLE( 423 );
                WAIT_BATTLE();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                return;
            case 2: // Hanged Man
                CALL_BATTLE( 424 );
                WAIT_BATTLE();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                return;
            case 3: // Chidori
                CALL_BATTLE( 425 );
                WAIT_BATTLE();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                return;
            case 4: // Next Page
                CallBattle_3();
                break;
            case 5: // Previous Page
            case 999: // Cancel
                //CallBattle_B();
                return;
        }
    }
}

void CallBattle_3()
{
    int FldCurMaj = FLD_GET_MAJOR();
    int FldCurMin = FLD_GET_MINOR();
    SEL_DEFKEY( 14, 999 );
    SEL_DEFKEY( 8, 6 );
    while ( keepMenus ) 
    {
        int bossSel_3 = MSG_SELECT( BOSS_SEL3_Text, BossSelect_3, 0 );
        switch (bossSel_3)
        {
            case 0: // Jin
                CALL_BATTLE( 426 );
                WAIT_BATTLE();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                return;
            case 1: // Takaya
                CALL_BATTLE( 427 );
                WAIT_BATTLE();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                return;
            case 2: // Nyx
                CALL_BATTLE( 428 );
                WAIT_BATTLE();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                return;
            case 3: // Elizabeth
                CALL_BATTLE( 430 );
                WAIT_BATTLE();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                return;
            case 4: // Theodore
                CALL_BATTLE( 455 );
                WAIT_BATTLE();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                return;
            case 5: // Margaret
                CALL_BATTLE( 453 );
                WAIT_BATTLE();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                return;
            case 6: // Previous Page
            case 999: // Cancel
                return;
        }
    }
}


void PlayerEditorDisplay()
{
    while ( keepMenus )
    {
        SEL_DEFKEY( 14, 999 );
        if (isPC = true)
            SEL_DEFKEY( 11, 4 );
        else
            SEL_DEFKEY( 9, 4 );
        int selection = MSG_SELECT( ModMenuName, PlayerMenu, 0 );
        switch ( selection )
        {
            case 999: // Cancel
                return;
            case 0: // Evolve party member persona
                int unit = SelectUnitNoProtag();
                if ( unit != -1 )
                    PERSONA_EVOLUTION( unit );
                break;
            case 1: // Social Stats
                StatEditorDisplay();
                break;
            case 2: // Items
                ItemEditorDisplay();
                break;
            case 3: // Party Edit
                PartyEditorDisplay();
                break;
            case 4: // Count Editor
                CountEditorDisplay();
                break;
            case 5: // Next Page
                PlayerEditorDisplay2();
                break;
        }
    }
}

void CountEditorDisplay()
{
    int var54 = 0; // Naming the var 'count' like I wanted to causes the code to not compile for some unknown reason. TODO: More research.
    while ( keepMenus )
    {
        SEL_DEFKEY( 14, 999 );
        int selection = MSG_SELECT( ModMenuName, CountSelect, 0 );
        switch ( selection )
        {
            case 0: // Enter Count
                var54 = SelectNumberPrompt( CountDlg, 4 );
                if ( var54 == -1 ) 
                    break;
            case 1: // Count Edit
                SET_MSG_VAR( 1, var54, 0 );
                SET_MSG_VAR( 2, GET_COUNT(var54), 0 );
                int value = SelectNumberPrompt( CountDlg2, 4 );
                if ( value == -1 )
                    break;
                SET_COUNT( var54, value );
                return;
            case 999: // Cancel
                return;
        }
    }
}




void SLinkDisplay()
{
    int SLink = SelectSLink();
    if ( SLink != -1 )
    {
        EVT_FUNCTION_000C( 0, SLink ); // Setting to 0 or 1 does absolutely nothing that I can tell, setting to anything higher causes a game crash
        CMM_SET_LV( SLink, ( CMM_GET_LV(SLink) + 1 ), 9999 ); // Unsure of what the 3rd param does, seemingly useless as the function is purely visual.
        EVT_FUNCTION_0007( SLink ); // Actually handles setting the rank to be +1, cannot get it to advance any higher after that, TODO: More research.
    }
    return;
}

void PlayerEditorDisplay2()
{
    int FldCurMaj = FLD_GET_MAJOR();
    int FldCurMin = FLD_GET_MINOR();
    while ( keepMenus )
    {
        SEL_DEFKEY( 14, 999 );
        if (isPC = true)
            SEL_DEFKEY( 10, 2 );
        else
            SEL_DEFKEY( 8, 2 );
        int selection = MSG_SELECT( ModMenuName, PlayerMenu2, 0 );
        switch ( selection )
        {
            case 0: // Set Protagonist Name
                CALL_NAME_ENTRY();
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                break;
            case 1: // Max Money
                ADD_PC_MONEY( 99999999 );
                DisplayMessagePrompt( MoneyAdded );
                break;
            case 2: // Time Travel
                int month = SelectNumberPrompt( TimeTravel, 2 );
                if ( month == -1 )
                    break;
                int day = SelectNumberPrompt( TimeTravel2, 2 );
                if ( day == -1 )
                    break;
                keepMenus = false;
                FADE( 3, 20 );
                FUNCTION_0036( month, day, 0 );
                NEXT_TIME();
                return;
            case 3: // Previous Page
            case 999: // Cancel
                // PlayerEditorDisplay();
                return;
        }
    }
}

void StatEditorDisplay()
{
    while ( keepMenus )
    {
        SEL_DEFKEY( 14, 999 );
        int selection = MSG_SELECT( ModMenuName, StatsMenu, 0 );
        int pointsToAdd = 0;
        switch ( selection )
        {
            case 999: // Cancel
                return;
            case 0: // Academics
                pointsToAdd = SelectNumberPrompt( StatPrompt, 2 );
                if ( pointsToAdd != -1 )
                    ADD_PC_STAT( 0, pointsToAdd );
                break;
            case 1: // Charm
                pointsToAdd = SelectNumberPrompt( StatPrompt, 2 );
                if ( pointsToAdd != -1 )
                    ADD_PC_STAT( 1, pointsToAdd );
                break;
            case 2: // Courage
                pointsToAdd = SelectNumberPrompt( StatPrompt, 2 );
                if ( pointsToAdd != -1 )
                    ADD_PC_STAT( 2, pointsToAdd );
                break;
        }
    }
}

void ItemEditorDisplay()
{
    int itemId = SelectNumberPrompt( ItemPrompt, 4 );
    if ( itemId != -1 )
    {
        int amount = SelectNumberPrompt( ItemPrompt2, 2 );
        if ( amount != -1 )
        {
            SET_ITEM_NUM( itemId, ( GET_ITEM_NUM( itemId ) + amount ) );
            SET_MSG_VAR( 1, itemId, 5 );
            SET_MSG_VAR( 2, amount, 0 );
            DisplayMessagePrompt( ItemAdded );
        }
    }
}

void PartyEditorDisplay()
{
    int unit = 0;
    while ( keepMenus )
    {
        SEL_DEFKEY( 14, 999 );
        int selection = MSG_SELECT( ModMenuName, PartyEditMenu, 0 );
        switch ( selection )
        {
            case 999: // Cancel
                return;
            case 0: // Add Party Members
                unit = SelectUnitNoProtagNoFuuka();
                if ( unit != -1 )
                    PARTY_IN( unit );
                break;
            case 1: // Remove Party Members
                unit = SelectUnitNoProtagNoFuuka();
                if ( unit != -1 )
                    PARTY_OUT( unit );
                break;
            case 2: // Set Tiredness
                SetTiredness();
                break;
        }
    }
}

void SetTiredness()
{
    int unit = SelectUnit();
    if ( unit != -1 )
    {
        SEL_DEFKEY( 14, 999 );
        int selection = MSG_SELECT( ModMenuName, SetTiredness, 0 );
        switch ( selection )
        {
            case 999: // Cancel
                return;
            case 0: // Great
                SET_TIREDNESS( unit, 2 );
                break;
            case 1: // Good
                SET_TIREDNESS( unit, 0 );
                break;
            case 2: // Tired
                SET_TIREDNESS( unit, 3 );
                break;
        }
    }
}

void FieldSelect()
{
    SET_MSG_VAR( 1, FLD_GET_MAJOR(), 0 );
    SET_MSG_VAR( 2, FLD_GET_MINOR(), 0 );
    while ( keepMenus )
    {
        SEL_DEFKEY( 14, 999 );
        int selection = MSG_SELECT( ModMenuName, FieldSelect, 0 );
        switch ( selection )
        {
            case 999: // Cancel
                return;
            case 0: // Enter Field ID
                int temp = SelectNumberPrompt( FieldDlg, 3 );
                if ( temp == -1 )
                    break;
                gFieldMajor = temp;
                temp = SelectNumberPrompt( FieldDlg2, 3 );
                if ( temp == -1 )
                    break;
                gFieldMinor = temp;
                break;
            case 1: // Load Field
                if (gFieldMajor == 0 && gFieldMinor == 0)
                    DisplayMessagePrompt( LoadCheckError );
                else
                    CALL_FIELD( gFieldMajor, gFieldMinor, 0, 0  );
                keepMenus = false;
                return;
            case 2: // Load 3D Field
                if (gFieldMajor == 0 && gFieldMinor == 0)
                    DisplayMessagePrompt( LoadCheckError );
                else
                    FCL_FUNCTION_0015( gFieldMajor, gFieldMinor, 0, 0  );
                keepMenus = false;
                return;
        }
    }
}

void EventSelect()
{
    int FldCurMaj = FLD_GET_MAJOR();
    int FldCurMin = FLD_GET_MINOR();
    while ( keepMenus )
    {
        SEL_DEFKEY( 14, 999 );
        int selection = MSG_SELECT( ModMenuName, EventSelect, 0 );
        switch ( selection )
        {
            case 999: // Cancel
                return;
            case 0: // Enter Event ID
                int temp = SelectNumberPrompt( EventDlg, 3 );
                if ( temp == -1 )
                    break;
                gEventMajor = temp;
                temp = SelectNumberPrompt( EventDlg2, 3 );
                if ( temp == -1 )
                    break;
                gEventMinor = temp;
                // EventSelect();
                break;
            case 1: // Load Event ID
                if ( gEventMajor == 0 && gEventMinor == 0 )
                {
                    DisplayMessagePrompt(LoadCheckError);
                    break;
                }
                FADE( 3, 20 );
                CALL_EVENT( gEventMajor, gEventMinor );
                CALL_FIELD( FldCurMaj, FldCurMin, 0, 0 );
                break;
        }
    }
}

void CallFacilityDisplay()
{
    int FldCurMaj = FLD_GET_MAJOR();
    int FldCurMin = FLD_GET_MINOR();
    int warn = 0;
    while ( keepMenus )
    {
        SEL_DEFKEY( 14, 999 );
        int selection = MSG_SELECT( ModMenuName, FacilityMenu, 0 );
        switch ( selection )
        {
            case 999: // Cancel
                return;
            case 0: // Town map
                keepMenus = false;
                FLD_SEL_EX( 0 );
                return;
            case 1: // Save Menu
                keepMenus = false;
                SAVE_MENU();
                return;
            case 2: // Persona Fusion
                keepMenus = false;
                CALL_COMBINE_SHOP();
                return;
        }
    }
}

void FlagsEditorDisplay()
{
    while ( keepMenus )
    {
        SEL_DEFKEY( 14, 999 );
        int selection = MSG_SELECT( ModMenuName, FlagMenu, 0 );
        switch ( selection )
        {
            case 999: // Cancel
                return;
            case 0: // Manual Input
                FlagManualInput();
                break;
            case 1: // Add Party Members
                int unit = SelectUnitNoProtag();
                if ( unit != -1 )
                    BIT_ON( 334 + unit );
                if ( unit == PartyMember.Mitsuru )  // Mitsuru has a different flag from
                    BIT_ON( 82 );                   // everyone else for some reason??????
                break;
            case 2: // Remove Party Members
                unit = SelectUnitNoProtag();
                if ( unit != -1 )
                    BIT_OFF( 334 + unit );
                if ( unit == PartyMember.Mitsuru )
                    BIT_OFF( 82 );
                break;
            case 3: // Navigator
                Navigator();
                break;
            case 4: // Mass Flag Editor
                FlagMassEditor();
                break;
        }
    }
}

void Navigator()
{
    for ( int i = 0; i < 32; i++ )
        SET_MSG_VAR( i, i, 4 );
    while ( keepMenus )
    {
        SEL_DEFKEY( 14, 999 );
        int selection = MSG_SELECT( ModMenuName, NaviMenu, 0 );
        switch ( selection )
        {
            case 999://Cancel
                return;
            case 0://Fuuka
                BIT_OFF( 4887 );
                BIT_OFF( 321 );
                break;
            case 1://Mitsuru
                BIT_OFF( 4887 );
                BIT_ON( 321 );
                break;
            case 2://None
                BIT_ON( 4887 );
                break;
        }
    }
}

void FlagManualInput()
{
    int id = SelectNumberPrompt( SelectFlagDialog, 4 );
    if ( id != -1 )
    {
        SET_MSG_VAR( 1, id, 0 );
        int onOff = SelectOnOffCheck();
        switch (onOff)
        {
            case 0: // On
                BIT_ON( id );
                DisplayMessagePrompt( FlagOn );
                return;
            case 1: // Off
                BIT_OFF( id );
                DisplayMessagePrompt( FlagOff );
                return;
            case 2: // Check
                if ( BIT_CHK( id ) )
                    DisplayMessagePrompt( FlagCheckOn );
                else
                    DisplayMessagePrompt( FlagCheckOff );
                return;
        }
    }
}

void FlagMassEditor()
{
    while ( keepMenus )
    {
        SEL_DEFKEY( 14, 999 );
        int selection = MSG_SELECT( ModMenuName, FlagMassEditor, 0 );
        switch ( selection )
        {
            case 999: // Cancel
                return;
            case 0: // Disable all flags
                for ( int i = 0; i < 0x1600; i++ )
                    BIT_OFF( i );
                break;
            case 1: // Enable all flags
                for ( int i = 0; i < 0x1600; i++ )
                    BIT_ON( i );
                break;
            case 2: // Complete All Quests
                for (int i = 4465; i < 4563; i++)
                {
                    if ( i != 4548 && ( i > 4542 || i < 4525 ) )
                        BIT_ON( i );
                }
                break;
            case 3: // Enable all tartarus guardians
                for (int i = 3536; i < 3562; i++)
                {
                    if ( i != 3561 && i != 3560 )
                        BIT_ON( i );
                }
                break;
            case 4: // Enable all warp points
                for (int i = 3501; i < 3535; i++)
                {
                    if ( ( i > 3528 || i < 3519 ) && ( i > 3504 || i < 3501 ) )
                        BIT_ON( i );
                }
                break;
            case 5: // Swap enabled/disabled flags
                for ( int i = 0; i < 0x1600; i++ )
                {
                    if ( BIT_CHK( i ) )
                        BIT_OFF( i );
                    else
                        BIT_ON( i );
                }
                break;
            case 6: // Toggle range of flags
                ToggleRange();
                break;
        }
    }
}

void ToggleRange()
{
    int start = SelectNumberPrompt( FlagRangePrompt, 4 );
    int end = SelectNumberPrompt( FlagRangePrompt2, 4 );
    SEL_DEFKEY( 14, 999 );
    int onOff = SelectOnOff();
    switch (onOff)
    {
        case 999: // Back
            return;
        case 0: // On
            for ( int i = start; i < end; i++ )
                BIT_ON( i );
            return;
        case 1: // Off
            for ( int i = start; i < end; i++ )
                BIT_OFF( i );
            return;
    }
}
